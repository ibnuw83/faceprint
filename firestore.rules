rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default: Deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Settings can only be read and written by admins.
    match /settings/{settingId} {
        allow read, write: if isAdmin();
    }
    
    // Departments can only be managed by admins.
    match /departments/{deptId} {
        allow read, write: if isAdmin();
    }

    // Users collection rules
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow write: if isAdmin(); // Admins can create/delete users
    }
    
    // Attendance rules
    match /attendance/{attendanceId} {
      // Employees can create their own attendance records.
      allow create: if request.auth.uid != null;
      // Employees can read their own history. Admins can read all history.
      allow list: if isAdmin() || (request.auth.uid != null && request.query.where.employeeId == request.auth.token.employeeId);
      // Only admins can delete attendance records.
      allow delete: if isAdmin();
      // No one can update an attendance record once created.
      allow update: if false;
       // Allow get for individual record access if needed
      allow get: if isAdmin() || (request.auth.uid != null && resource.data.uid == request.auth.uid);
    }
    
    // Leave Requests rules
    match /leaveRequests/{requestId} {
      allow create: if request.auth.uid != null && request.resource.data.uid == request.auth.uid;
      allow read: if isAdmin() || (request.auth.uid != null && resource.data.uid == request.auth.uid);
      allow update: if isAdmin(); // Only admins can approve/reject
    }
  }
}
