rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
        return request.auth != null;
    }

    // Settings collection:
    match /settings/landingPage {
        allow read: if true;
        allow write: if isAdmin();
    }
    match /settings/announcement {
        allow read: if true;
        allow write: if isAdmin();
    }
     match /settings/footer {
        allow read: if true;
        allow write: if isAdmin();
    }
    match /settings/branding {
        allow read: if true;
        allow write: if isAdmin();
    }
    match /settings/location {
         allow read: if isAuthenticated();
         allow write: if isAdmin();
    }
     match /settings/schedule {
         allow read: if isAuthenticated();
         allow write: if isAdmin();
    }

    // Users collection:
    match /users/{userId} {
      allow read, write: if isAdmin();
      allow read, update: if isOwner(userId);
    }

    // Departments can be read by authenticated users, managed by admins.
    match /departments/{deptId} {
      allow read: if isAuthenticated();
      allow write, create, delete: if isAdmin();
    }

    // Attendance:
    match /attendance/{attId} {
        allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
        allow read, delete: if isAdmin();
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.employeeId == resource.data.employeeId;
    }
    
    // Leave Requests:
    match /leaveRequests/{reqId} {
        allow read, write: if isAdmin();
        allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
        allow read: if isAuthenticated() && resource.data.uid == request.auth.uid;
    }
  }
}
