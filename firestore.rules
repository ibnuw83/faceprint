rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for collections
    
    // Users can read their own profile. Admins can read all profiles.
    // Any signed-in user can create their own user document during registration.
    // Users can update their own data. Admins can update any.
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Attendance can be created by any signed-in user for themselves.
    // Users can only read their own attendance records.
    // Admins can read all records.
    match /attendance/{docId} {
        allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
        allow read, list: if isSignedIn() && (request.query.where.uid == request.auth.uid || isAdmin());
        allow update, delete: if isAdmin();
    }
    
    // Settings can be read by any signed-in user (for schedule/location info).
    // Only admins can write/change settings.
    match /settings/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // Departments can be read by any signed-in user (for location info).
    // Only admins can write/change departments.
    match /departments/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // Leave requests can be created by any signed-in user for themselves.
    // Users can read their own requests. Admins can read all.
    match /leaveRequests/{docId} {
       allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
       allow read: if isSignedIn() && (request.resource.data.uid == request.auth.uid || isAdmin());
       allow list: if isSignedIn() && (request.query.where.uid == request.auth.uid || isAdmin());
       allow update, delete: if isAdmin();
    }
  }
}
