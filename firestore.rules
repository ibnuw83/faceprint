
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      // Allow read/update by the owner or an admin
      allow read, update: if isOwner(userId) || isAdmin();
      // Allow create for any authenticated user
      allow create: if request.auth != null;
      // Disallow delete from client
      allow delete: if false;
    }
    
    match /departments/{departmentId} {
        // Only admins can read/write departments
        allow read, write: if isAdmin();
    }
    
    match /settings/{settingId} {
        // Only admins can read/write settings
        allow read, write: if isAdmin();
    }
    
    match /attendance/{attendanceId} {
        // Admins can read all records
        // Employees can only create records (assuming validation happens in app)
        // and cannot read all records for privacy. History is fetched via specific queries.
        allow read, delete: if isAdmin();
        allow create: if request.auth != null;
        allow update, delete: if false; // General updates/deletes are disallowed
    }

    match /leaveRequests/{requestId} {
      // READ: 
      // - Admins can read all requests.
      // - Authenticated users can read their own requests.
      allow read: if isAdmin() || (request.auth != null && request.auth.uid == resource.data.uid);

      // CREATE:
      // - Any authenticated user can create a request.
      // - The UID in the new document must match the creator's UID.
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;

      // UPDATE:
      // - An admin can update the status.
      // - The user who created the request can only update the 'acknowledgedByEmployee' field.
      allow update: if isAdmin() || 
                      (isOwner(resource.data.uid) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['acknowledgedByEmployee']));

      // DELETE:
      // - No one can delete a leave request from the client to preserve history.
      allow delete: if false;
    }
  }
}
