
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users Collection
    // Admin: Can read/write any user document.
    // Employee: Can read/update their own document.
    match /users/{userId} {
      allow read, update: if isAdmin() || isOwner(userId);
      allow create: if request.auth != null; // Anyone authenticated can create their user record initially
      allow delete: if isAdmin();
    }

    // Attendance Collection
    // Admin: Can read/write any attendance record.
    // Employee: Can create records for themselves, and read their own history.
    match /attendance/{docId} {
      allow read: if isAdmin() || request.auth.token.employeeId == resource.data.employeeId;
      allow create: if request.auth.token.employeeId == request.resource.data.employeeId;
      allow write: if isAdmin(); // Includes update and delete for admin
    }
    
    // Departments Collection
    // Admin: Can read/write all department data.
    // Employee: Can only read department data.
    match /departments/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    
    // Leave Requests Collection
    // Admin: Can read/write any leave request.
    // Employee: Can create for themselves, and read their own requests.
    match /leaveRequests/{docId} {
      allow read: if isAdmin() || isOwner(resource.data.uid);
      allow create: if isOwner(request.resource.data.uid);
      allow update, delete: if isAdmin();
    }
    
    // Settings Collection
    // Admin: Can read/write all settings.
    // Employee: Can read settings.
    match /settings/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
  }
}
