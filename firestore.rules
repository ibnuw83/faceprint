rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserInCompany(companyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }

    function isUserRoleAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Public settings are readable by anyone (for login page etc.)
    match /settings/{setting} {
      allow read: if true;
      allow write: if false; // Should only be changed from a super-admin console/backend
    }

    // The 'users' collection maps a user's UID to their companyId and role.
    // This collection is critical for rules enforcement.
    match /users/{userId} {
      // Users can read their own mapping document.
      allow get: if request.auth.uid == userId;
      // No one can list all users in this top-level collection.
      allow list: if false;
      // Users can be created during registration.
      allow create: if request.auth.uid == userId;
      // Users cannot update or delete their mapping document. This should be a super-admin task.
      allow update, delete: if false;
    }

    // Main company data, where everything is namespaced by companyId
    match /companies/{companyId} {
      // Company document itself is not really used yet, so no access.
      allow read, write: if false;

      // Rules for all subcollections within a company
      match /{subcollection}/{docId} {
        // A user must belong to the company to perform any action.
        allow read, write: if isUserInCompany(companyId);
      }

       // More specific rules for 'users' subcollection
      match /users/{userId} {
        // Allow read access if the user is an admin of the company, or if they are accessing their own document.
        allow get: if isUserInCompany(companyId) && (isUserRoleAdmin() || request.auth.uid == userId);
        // Only admins can list all users within their own company.
        allow list: if isUserInCompany(companyId) && isUserRoleAdmin();
        // Admins can create new users. Users can complete their own profile.
        allow create, update: if isUserInCompany(companyId) && (isUserRoleAdmin() || request.auth.uid == userId);
        // Only admins can delete users.
        allow delete: if isUserInCompany(companyId) && isUserRoleAdmin();
      }

      // Rules for attendance
      match /attendance/{attendanceId} {
        // Users can create their own attendance records.
        allow create: if isUserInCompany(companyId);
        // Only admins can list all attendance records.
        allow list: if isUserInCompany(companyId) && isUserRoleAdmin();
        // Users can read their own records, admins can read any.
        allow get: if isUserInCompany(companyId); // Simplified for now
         // Only admins can delete records.
        allow delete: if isUserInCompany(companyId) && isUserRoleAdmin();
      }
      
      // Rules for departments
      match /departments/{departmentId} {
        // Admins can manage departments.
        allow read, write: if isUserInCompany(companyId) && isUserRoleAdmin();
      }
      
      // Rules for company-specific settings
      match /settings/{settingName} {
         // Admins can manage their own company's settings.
        allow read, write: if isUserInCompany(companyId) && isUserRoleAdmin();
      }

      // Rules for leave requests
      match /leaveRequests/{requestId} {
         // Admins can list all requests.
        allow list: if isUserInCompany(companyId) && isUserRoleAdmin();
        // Users can create requests for themselves.
        allow create: if isUserInCompany(companyId) && request.resource.data.uid == request.auth.uid;
        // Admins can read any request. Users can read their own.
        allow get, update, delete: if isUserInCompany(companyId) && (isUserRoleAdmin() || getAfter(/databases/$(database)/documents/companies/$(companyId)/leaveRequests/$(requestId)).data.uid == request.auth.uid);
      }
    }
  }
}