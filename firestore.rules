
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Safely check for the 'admin' role. This will not throw a permission error if the document does not exist.
      // It will simply return false, which is the correct behavior for a non-existent or non-admin user.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings: Publicly readable for all users. Only admins can write.
    match /settings/{settingId} {
      allow get: if true;
      allow write: if isAdmin();
    }
    
    // Departments: All logged-in users can read. Only admins can write.
    match /departments/{departmentId} {
        allow get, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // Users:
    // - Any authenticated user can TRY to get a user document (crucial for checking if a profile exists).
    // - A user can only create or update THEIR OWN document.
    // - Only an admin can list all users or delete a user.
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list, delete: if isAdmin();
      allow create, update: if request.auth.uid == userId || isAdmin();
    }

    // Attendance:
    // - A user can read THEIR OWN attendance records.
    // - An admin can read ALL attendance records.
    // - A user can only create records for THEMSELVES.
    // - Only an admin can delete records.
    match /attendance/{attendanceId} {
      allow read: if request.auth.uid == resource.data.uid || isAdmin();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update, delete: if isAdmin();
    }

    // Leave Requests:
    // - A user can read or update THEIR OWN requests.
    // - An admin can read ALL requests.
    // - A user can only create requests for THEMSELVES.
    // - Only an admin can delete requests.
    match /leaveRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.uid || isAdmin();
      allow create, update: if request.auth.uid == request.resource.data.uid || isAdmin();
      allow delete: if isAdmin();
    }
  }
}
