rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }

    // Helper function to check if the request is from the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can do anything
      // Users can read and update their own profile
      allow read, update: if isAdmin() || isOwner(userId);
      // Only admins can create or delete users
      allow create, delete: if isAdmin();
    }

    // Rules for settings documents
    match /settings/{settingId} {
      // Only admins can read or write settings
      allow read, write: if isAdmin();
    }
    
    // Rules for the 'departments' collection
    match /departments/{departmentId} {
      // Any authenticated user can read the department list
      allow read: if request.auth != null;
      // Only admins can write to departments
      allow write: if isAdmin();
    }

    // Rules for the 'attendance' collection
    match /attendance/{attendanceId} {
      // Admin can read all attendance records
      // Employees can read their own attendance records
      allow read: if isAdmin() || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.employeeId == resource.data.employeeId);
      // Authenticated users can create their own attendance records
      allow create: if request.auth != null;
      // Only admins can update or delete records
      allow update, delete: if isAdmin();
    }

    // Rules for the 'leaveRequests' collection
    match /leaveRequests/{requestId} {
       // Admin can read all requests
       // Employees can read their own requests
      allow read: if isAdmin() || isOwner(resource.data.uid);
      // Authenticated users can create requests for themselves
      allow create: if request.auth != null && isOwner(request.resource.data.uid);
      // Admins can update (approve/reject)
      // Employees can update their own request (e.g. to acknowledge it)
      allow update: if isAdmin() || isOwner(resource.data.uid);
      // Only admins can delete
      allow delete: if isAdmin();
    }
  }
}
