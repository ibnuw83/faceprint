rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      // Check the user document's 'role' field. This safely fails if the document doesn't exist.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Settings: Publicly readable for all users. Only admins can write.
    match /settings/{settingId} {
      allow get, list: if true;
      allow write: if isAdmin();
    }
    
    // Departments: All logged-in users can read the list. Only admins can write.
    match /departments/{departmentId} {
        allow get, list: if request.auth != null;
        allow create, update, delete: if isAdmin();
    }
    
    // Users: Logged-in users can attempt to read any single profile (needed for checks).
    // They can only create/update their OWN profile.
    // Admins can list/delete anyone.
    match /users/{userId} {
      allow get: if request.auth != null; // Allow any logged-in user to check for a document
      allow list, delete: if isAdmin();
      allow create, update: if request.auth.uid == userId || isAdmin();
    }

    // Attendance: Users can create/read their own records. Admins can do anything.
    match /attendance/{attendanceId} {
      allow read: if request.auth.uid == resource.data.uid || isAdmin();
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update, delete: if isAdmin();
    }

    // Leave Requests: Users can create/read/update their own. Admins can do anything.
    match /leaveRequests/{requestId} {
      // User can read their own, Admin can read all
      allow read: if request.auth.uid == resource.data.uid || isAdmin();
      // User can create/update their own, Admin can do it for anyone
      allow create, update: if request.auth.uid == request.resource.data.uid || isAdmin();
      // Only Admin can delete
      allow delete: if isAdmin();
    }
  }
}
